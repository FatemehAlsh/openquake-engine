#!/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright (C) 2023, GEM Foundation
#
# OpenQuake is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# OpenQuake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
from openquake.baselib import performance, sap, hdf5
from openquake.commonlib import readinput, datastore
from openquake.calculators import base
from openquake.engine import engine

INPUTS = dict(
    calculation_mode='event_based',
    number_of_logic_tree_samples='2000',
    ses_per_logic_tree_path='50',
    investigation_time='1',
    ground_motion_fields='false',
    minimum_magnitude='5',
    minimum_intensity='.05')
MODELS = '''
ALS AUS CEA EUR HAW KOR NEA PHL ARB IDN MEX NWA PNG SAM TWN
CAN CHN IND MIE NZL SEA USA ZAF CCA JPN NAF PAC SSA WAF
'''.split()  # GLD is missing
# MODELS = 'EUR MIE NAF'.split()

def read_job_inis(mosaic_dir, models):
    out = []
    for model in sorted(models):
        fname = os.path.join(mosaic_dir, model, 'in', 'job_vs30.ini')
        dic = readinput.get_params(fname)
        dic.update(INPUTS)
        if 'truncation_level' not in dic:  # for CAN
            dic['truncation_level'] = '5'
        if model == "KOR":
            dic['investigation_time'] = '50'
            dic['ses_per_logic_tree_path'] = '1'
        out.append(dic)
    return out


def main(mosaic_dir, out='gmf_data.hdf5'):
    """
    Storing global SES
    """
    job_inis = read_job_inis(mosaic_dir, MODELS)
    with performance.Monitor(measuremem=True) as mon:
        jobs = engine.run_jobs(
            engine.create_jobs(job_inis, log_level=logging.WARN))
        dstores = [datastore.read(job.calc_id) for job in jobs]
        oq = dstores[0]['oqparam']
        oq.inputs['gmfs'] = [ds.filename for ds in dstores]
        logging.warning(f'Saving {out}')
        with hdf5.File(out, 'w') as h5:
            base.import_gmfs_hdf5(h5, oq)
    print(mon)

main.mosaic_dir = 'Directory containing the hazard mosaic'
main.out = 'Output file'

if __name__ == '__main__':
    sap.run(main)
