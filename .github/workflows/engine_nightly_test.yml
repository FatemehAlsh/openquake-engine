name: Nightly Engine tests on User mode
on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref
        default: master
        required: true
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    - cron: "0 4 * * 0"

jobs:
  webUI and calcs in user mode:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python  ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup debugging session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 30
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      - name: Install dependencies
        run: |
          set -x
          BRANCH=master
          python install.py user --version=master
          # Standalone apps
          source ~/openquake/bin/activate
          echo "Downloading standalone apps"
          cd ..
          pwd
          TOOLS_BRANCH=master
          for app in oq-platform-standalone oq-platform-ipt oq-platform-taxtweb oq-platform-taxonomy; do
           echo "We need to use the branch $TOOLS_BRANCH for the standalone apps"
           git clone -b ${TOOLS_BRANCH} --depth=1 https://github.com/gem/${app}.git
           pip install -e ./${app}
           if [ "$app" = "oq-platform-taxtweb" ]; then
               export PYBUILD_NAME="oq-taxonomy"
               pip install -e ./${app}
               unset PYBUILD_NAME
           fi
          done
          deactivate
      - name: Actualize 'default' templates for email notifications
        run: |
          for file in /home/runner/work/oq-engine/oq-engine/openquake/server/templates/registration/*.default.tmpl; do
              cp -- "$file" "${file%.default.tmpl}"
          done
      - name: Test WebUI and run https calculation
        run: |
          BRANCH=master
          source ~/openquake/bin/activate
          set -x
          sudo mkdir /var/log/oq-engine/
          sudo chown -R runner /var/log/oq-engine/
          oq engine --upgrade-db
          oq --version
          #
          echo "Add settings for login and logging on webui before to start"
          cd /home/runner/work/oq-engine/oq-engine
          cd openquake/server
          cat > local_settings.py << EOF
          LOCKDOWN = True
          WEBUI_USER = 'runner'
          WEBUI_ACCESS_LOG_DIR = '/var/log/oq-engine'
          DEBUG = True
          EOF
          echo "DISPLAY content of local_settings"
          cat local_settings.py
          # START WEBUI
          oq webui start 127.0.0.1:8800 -s &
          echo "Waiting WEBUI up on port 8800...."
          while ! nc -z localhost 8800; do
            sleep 5 # wait for 1/10 of the second before check again
          done
          echo "Test WebUI with curl before to test django"
          sleep 1
          # Perform migration after setup local_settings
          cd /home/runner/work/oq-engine/oq-engine/openquake/server
          python manage.py migrate
          sleep 1
          curl --fail -L -I -X GET http://127.0.0.1:8800/accounts/login/
          echo -n "Test Standalone Tools pages"
          curl --fail -I -L -X GET http://127.0.0.1:8800/
          curl --fail -I -L -X GET http://127.0.0.1:8800/taxtweb
          curl --fail -I -L -X GET http://127.0.0.1:8800/taxonomy
          curl --fail -I -L -X GET http://127.0.0.1:8800/ipt
          echo -n "TEST DJANGO LOGIN "
          LOGIN_URL=http://127.0.0.1:8800/accounts/login/
          YOUR_USER='username'
          YOUR_PASS='password'
          COOKIES=cookies.txt
          CURL_BIN="curl -s -c $COOKIES -b $COOKIES -e $LOGIN_URL"
          echo -n "Django Auth: get csrftoken ..."
          $CURL_BIN $LOGIN_URL > /dev/null
          DJANGO_TOKEN="csrfmiddlewaretoken=$(grep csrftoken $COOKIES | sed 's/^.*csrftoken\s*//')"
          echo " perform login ..."
          $CURL_BIN \
              -d "$DJANGO_TOKEN&username=$YOUR_USER&password=$YOUR_PASS" \
              -X POST $LOGIN_URL > /dev/null
          echo "--------------------"
          echo "display log of webui"
          echo "--------------------"
          cat /var/log/oq-engine/webui-access.log
          if [ -s /var/log/oq-engine/webui-access.log ]; then
          # The file is not-empty.
          cat /var/log/oq-engine/webui-access.log
          else
          ## The file is empty.
          echo "Something not work as expected"
          exit 1
          fi
          # Run a calcs using https
          oq engine --run https://downloads.openquake.org/jobs/risk_test.zip
